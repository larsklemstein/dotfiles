
# ----------------------------------------------------------------------------
# basic stuff
# ----------------------------------------------------------------------------

for bin_dir in $HOME/app/binlocal $HOME/app/*/bin $HOME/*/bin $HOME/.*/bin
do
    test -d $bin_dir && PATH=$bin_dir:$PATH
done

if [ -d "$HOME/.pyenv/bin" -a -z "$PYENV_SHELL" ]
then
    PATH="$HOME/.pyenv/bin:$PATH"

    eval "$(pyenv init -)"
    eval "$(pyenv init --path)"

    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

export PATH

export TMPDIR=$HOME/tmp
test -d $TMPDIR || mkdir -vp $TMPDIR

ulimit -c 0
umask 002
test -s $HOME/.dircolors && eval $(dircolors $HOME/.dircolors)

alias ls='/bin/ls --color=auto'
alias ll='ls -lH'
alias la='ls -a'
alias lla='ls -lHa'

alias grep='grep --color=auto'
alias egrep='grep -E'
alias fgrep='grep -F'

alias ffind='2>/dev/null find'

alias webp2jpg='for w in *.webp; do convert $w ${w%.webp}jpg && /bin/rm $w; done'

export TERM=xterm-256color

export PAGER=less
export LESS='-RC'

export EDITOR=vim
export VISUAL=$EDITOR

set -o vi

alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'

alias fonts="fc-list |awk -v nix= '{\$1=nix; print;}' |cut -d: -f1| sort -u"



# ----------------------------------------------------------------------------
# homebrew
# ----------------------------------------------------------------------------

for brew_base in $HOME /home/linuxbrew
do
    brew_bin=$brew_base/.linuxbrew/bin

    if [ -r $brew_bin -a -d $brew_bin ]
    then
        eval $($brew_bin/brew shellenv)
        break
    fi
done

# ----------------------------------------------------------------------------
# fzf/ripgrep/fd stuff
# ----------------------------------------------------------------------------

if test -f $HOME/.fzf-bash-completion.sh
then
    . $HOME/.fzf-bash-completion.sh

    FZF_DEFAULT_OPTS='--height 80% --layout=default --border'
    export FZF_DEFAULT_OPTS

    export FZF_DEFAULT_COMMAND='fdfind . -t f'

    [ -f $HOME/.fzf-bash-key-bindings ] && . $HOME/.fzf-bash-key-bindings

    alias fzf='fzf --preview "bat {} -f"'
    # alias fzf='fzf --preview "bat {} -f --theme gruvbox"'
fi


# ---------------------------------------------------------------------------
# aws stuff
# ---------------------------------------------------------------------------

export AWS_CMD=aws

# better decide by your own and by call
export AWS_PAGER=""
alias aws_credentials_export='perl -00ne "/\{.+\"Credentials\":\s.+\"AccessKeyId\":\s+\"([^\"]+)\".+\"SecretAccessKey\":\s+\"([^\"]+)\".+\"SessionToken\":\s+\"([^\"]+)\"/s; print qq{export AWS_ACCESS_KEY_ID=\"\$1\";export AWS_SECRET_ACCESS_KEY=\"\$2\";export AWS_SESSION_TOKEN=\"\$3\"\n}"'

aws_gt() {
    [ $# -eq 2 -o $# -eq 4 ] || \
        { echo "usage: aws_gt profile [mfa token_code]"; return 1; }

    typeset profile="$1"
    typeset region="$2"
    typeset mfa="$3"
    typeset token_code="$4"

    typeset rc
    typeset json_out
    typeset export_commands

    typeset aws_gt_cmd="$AWS_CMD sts get-session-token --profile $profile"

    if [ -n "$mfa" ]
    then
        json_out="$($aws_gt_cmd --serial-number $mfa --token-code $token_code 2>&1)"
    else
        json_out="$($aws_gt_cmd 2>&1)"
    fi

	rc=$?

    [ $rc -eq 0 ] || { echo "ups: rc=$rc"; echo "$json_out"; return 1; }

    export_commands=$(aws_credentials_export <<< "$json_out")

    if [ -z "$export_commands" ]
    then
        echo "ups: unable to convert json to export def:"
        echo "$json_out"; return
        return 1
    fi

    export_commands+=";export AWS_PROFILE=$profile"
    export_commands+="; export AWS_DEFAULT_REGION=$region"

    eval $export_commands

    echo "--> now connected to AWS account \"$profile\" (region \"$region\")"
}
# EOF aws_gt()


# --- color stuff ---

test -s $HOME/.ls_colors && . $_

export GREP_COLORS='sl=49;39:cx=49;39:mt=49;38;5;178;1:fn=49;39:ln=49;39:bn=49;39:se=49;39';

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export PAGER=less
export LESS='-RC'

alias bat='bat --color=auto --theme=gruvbox'

# preview only if file size is <= 10MB
mybat() {
    [ $(stat -t "$1" |cut -d ' ' -f2) -le 10485760 ] && bat --color=always --theme=gruvbox-dark --style=header,numbers "$1"
}

# useful aliases

alias fnvim='nvim $(fzf)'

# git wants a command named 'vimdiff'
alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias gs='git status -s'

alias ssha='eval $(ssh-agent) && ssh-add'

alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'


# ----------------------------------------------------------------------------
# go
# ----------------------------------------------------------------------------

alias gt='go test'
alias gtv='go test -v'

cd_to_go_package_base() {
    typeset pwd_old=$PWD

    while [ ! -f $PWD/go.mod ]
    do
        if [ $PWD = "/" ]
        then
            cd $pwd_old
            echo "failed.." >&2
            return 1
        fi

        cd ..
    done

    return 0
}

alias gpb=cd_to_go_package_base

go_packagename() {
    typeset pwd_old=$PWD
    cd_to_go_package_base

    awk 'NR==1 {split($2, a, /\//); i = length(a); print a[i]}' go.mod

    cd $pwd_old
}

alias gp=go_packagename

gb() {
    typeset pwd_old=$PWD

    cd_to_go_package_base || return 1

    go build .

    cd $pwd_old
}

gr() {
    typeset arg=${1}
    typeset pwd_old=$PWD

    cd_to_go_package_base || return 1

    if [ ! -f main.go ]
    then
        echo "no main.go at top level" >&2
        return
    fi

    typeset progname=$(go_packagename)

    if [ -z "$progname" ]
    then
        cd $pwd_old
        echo "progname is empty after detection attempt!?.." >&2
        return 1
    fi

    if [ "$arg" = "b" -o ! -x $progname ]
    then
        gb
    fi

    ./$progname "$@"
    cd $pwd_old
}

alias gbr='gr b'


# we do not want tmux in the vscode terminal, so we need to know
# VSCode might run as local client or via remote extension  (using node server)
export IS_VSCODE_TERM=n

if pstree -apps $$ | \
    egrep -q -- '-(code,[0-9]+|node,[0-9]+/.*/.vscode-server/bin/.+)'
then
    IS_VSCODE_TERM=y
fi

export IS_TMUX_SESSION=n

if [ $IS_VSCODE_TERM = n ] && pstree $$ -s -t | grep -q -- '-tmux: *server'
then
    IS_TMUX_SESSION=y
fi

export IS_TMUX_SESSION

ps -u $(id -un) | egrep -q '[s]sh-agent$' || eval $(ssh-agent)

 # delete all non attached, non named tmux sessions
alias clean_tmux_sessions='for session in $(tmux ls | egrep "^[0-9]+:" | grep -v " (attached)" |cut -d: -f1); do tmux kill-session -t $session; done'

if [ "$SKIP_TMUX" != "y" \
     -a "$IS_VSCODE_TERM" = n -a "$IS_TMUX_SESSION" = n ] && \
    command -v tmux >/dev/null && [ -z "$TMUX" ]
then
    if [ -f $HOME/.tmux.main_name ]
    then
        _tmux_main_name=$(< $HOME/.tmux.main_name)
    else
        _tmux_main_name=main
    fi

    clean_tmux_sessions

    if tmux ls |grep -q "^${_tmux_main_name}:" 
    then
        if [ -n "$SSH_CONNECTION" ]
        then

            if tmux ls |grep -q "^${_tmux_main_name}:.* (attached)\$"
            then
                tmux detach-client -s $_tmux_main_name
            fi

            tmux attach -t $_tmux_main_name
            # exec tmux attach -t $_tmux_main_name
        elif tmux ls |grep -q "^${_tmux_main_name}:.* (attached)\$"
        then
            tmux new-session
            # exec tmux new-session
        else
            tmux attach -t $_tmux_main_name
            # exec tmux attach -t $_tmux_main_name
        fi
    else
        tmux new-session -s $_tmux_main_name
        # exec tmux new-session -s $_tmux_main_name
    fi

    unset _tmux_main_name
fi


# could not harm under sudo conditions?!
cd $HOME

# ----------------------------------------------------------------------------
# source optionally local/private settings
# ----------------------------------------------------------------------------


test -s $HOME/.common_interactive_local_sh && . $HOME/.common_interactive_local_sh


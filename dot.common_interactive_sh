# ----------------------------------------------------------------------------
# generic stuff
# ----------------------------------------------------------------------------

in_path() {
    egrep -q '(^|:)'"$1"'(:|$)' <<< "$PATH"
}

# print multi columns
pmc() {
    [ $# -eq 0 ] && { echo "???" >&2; return 1; }
    local pstr=

    local i
    for ((i = 0; i < $1; i++))
    do
        [ -z "$pstr" ] && pstr='-' || pstr="$pstr -"
    done

    eval paste $pstr
}

# print header
_ph() {
    local header="${1:-???}"
    echo
    echo "--- $header ---"
}

# add local pathes etc.

mark_list_item() {
    awk '/'$1'/ { $0 = $0 " <---"; } { print($0); }'
}

THIS_OS=linux
[ $(uname -s) = 'Darwin' ] && THIS_OS=mac
export THIS_OS

export TERM=xterm-256color

# cd (to) path of
cdpo() {
    [ $# -ne 1 ] && { echo '???' >&2; return 1; }
    local prog="$1"
    local fullpath=$(which $prog 2>/dev/null)

    if type $prog | grep -q 'is an alias'
    then
        echo "Is an alias" >&2
        return 1
    fi

    if [ -n "$fullpath" ]
    then
        cd ${fullpath%/*}
        return 0
    else
        echo "Not found" >&1
        return 1
    fi
}

fancy_print=$(which lolcat)
[ -n "$fancy_print" ] || fancy_print=/bin/cat

alias C=clear

CC() {
    clear
    for _ in $(seq $LINES); do echo; done
}

NN() {
    local nf=$HOME/.nuke.big
    if [ ! -f $nf ]
    then
        CC
        return
    fi

    local nl=$(wc -l $nf | awk '{print($1)}')

    local nw=62
    local nwa=$(((COLUMNS-62)/2))

    local sa=$((LINES-nl))
    local sl=$((sa/2))


    local indent=""
    for ((i = 0; i < $nwa; i++)); do
        indent+=" "
    done

    for ((i=0; i < $sl; i++)); do echo; done
    sed "s/^/$indent/" $nf | $fancy_print
    for ((i=0; i < $sl; i++)); do echo; done
}

# ----------------------------------------------------------------------------
# The holy $PATH
# ----------------------------------------------------------------------------

for _bin_dir in ~/bin ~/.local/bin ~/go/bin ~/.rd/bin \
    ~/app/bin ~/app/jenkins-cli ~/app/{go,jdk,VSCode-linux-x64}/bin \
    ~/.npm-global ~/app/lkltools ~/.rd/bin /opt/homebrew/opt/coreutils/bin
do
    if ! in_path $_bin_dir 2>/dev/null
    then
        PATH=$_bin_dir:$PATH
    fi
done
unset _bin_dir

for _brew_dir in /opt/homebrew $HOME/.linuxbrew /home/linuxbrew/.linuxbrew
do
    _brew_prog=${_brew_dir}/bin/brew

    if [ -x ${_brew_prog} ]
    then
        eval $(${_brew_prog} shellenv)

        if [ -d "$_brew_dir/opt/openjdk@17" ] && ! in_path "$_brew_dir/opt/openjdk@17/bin" 
        then
            PATH="$_brew_dir/opt/openjdk@17/bin:$PATH"
        fi

        export HOMEBREW_NO_ENV_HINTS=y
        export BREW_BIN="$_brew_dir/bin"

        break
    fi
done
unset _brew_dir _brew_prog


# ----------------------------------------------------------------------------
# rust stuff
# ----------------------------------------------------------------------------

# activate rust if available
if [ -f $HOME/.cargo/env ]
then
    . $HOME/.cargo/env

    export RUST_BACKTRACE=1
fi

if test -d $HOME/.pyenv/bin
then
    PATH=$HOME/.pyenv/bin:$PATH
    eval "$(pyenv init --path)"

    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi


# ----------------------------------------------------------------------------
# python stuff
# ----------------------------------------------------------------------------

alias pyenv_versions='_ph Available; pyenv install --list| grep "^ *3" | tr -d " " | egrep -v "(^3\.[0-3]\.|dev|a[0-9])" | pmc 8; _ph Installed; pyenv versions | grep -v "system" | sed -e "s/^\*//" -e "s/(.*//" | tr -d "[ ]" | pmc 8; echo;'


alias p3=python3

per() {
    if [ ! -f ./Pipfile ]
    then
        echo "No Pipfile found here, abort!" >&2
        return 1
    fi

    pipenv run ./$*
}

pyc() {
    local pyfile="$1"

    echo "" >&2

    echo "Check types:" >&2
    pyright "$pyfile"
    echo "[rc=$?]"

    echo "" >&2

    echo "Check style:" >&2
    flake8 "$pyfile"
    echo "[rc=$?]"

    echo "" >&2
}


# ---------------------------------------------------------------------------
# The nore or less usual stuff
# ---------------------------------------------------------------------------

export TMPDIR=$HOME/tmp
test -d $TMPDIR || mkdir -vp $TMPDIR

ulimit -c 0 -n 4096
umask 002

test -f $HOME/.dircolors && eval $(dircolors $HOME/.dircolors)

test $THIS_OS = linux && alias open=exo-open

alias cdw='cd $HOME/work; ls -ltr'

if which lsd >/dev/null
then
    #  alias ls="$(which lsd) --icon-theme=unicode"

    # for unknown reason icons does not work in Ipad blink app
    # as sometimes(!) tail characters are cut off
    alias ls="$(which lsd) --icon=never"
    alias ll='ls -l'
    alias la='ls -a'
    alias lla='ls -la'
else
    alias ls='/bin/ls --color=auto'
    alias ll='ls -lh'
    alias la='ls -a'
    alias lla='ls -lHa'
fi

alias grep='grep --color=auto'
alias egrep='grep -E'
alias fgrep='grep -F'

alias dua="$BREW_BIN/dua -t4 interactive"

alias nrg='rg --color=never'

alias webp2jpg='for w in *.webp; do convert $w ${w%.webp}jpg && /bin/rm $w; done'


export PAGER=less
export LESS='-RC'

export EDITOR=nvim
export VISUAL=$EDITOR

set -o vi

alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias pstree='pstree -g3'


# ---------------------------------------------------------------------------
# ssh-agent stuff
# ---------------------------------------------------------------------------

alias s='eval $(ssh-agent)'

# we want a ssh-agent always:
ps x | grep -q  '[s]sh-agent$' || s

alias sa='ssh-add'

alias kill_ssh_agents='for p in $(ps x |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'

alias fonts="fc-list |awk -v nix= '{\$1=nix; print;}' |cut -d: -f1| sort -u"


# ---------------------------------------------------------------------------
# fzf stuff
# ---------------------------------------------------------------------------

# . $(brew --prefix)/opt/fzf/shell/key-bindings.bash
#

# take fzf from $PATH now...
if [ -n "$ZSH_NAME" ]
then
    eval "$(fzf --zsh)"
else
    eval "$(fzf --bash)"
fi

export FZF_DEFAULT_OPTS='--border sharp --height=60%'

alias ffzf='fzf --preview="test -e {} && bat --style=numbers --color=always {}"'

fze() {
    local choosen=$(ffzf)

    [ -n "$choosen" ] && $EDITOR $choosen
}


# ---------------------------------------------------------------------------
# aws stuff
# ---------------------------------------------------------------------------

export AWS_CMD=aws

# better decide by your own and by call
export AWS_PAGER=""

alias aws_credentials_export='perl -00ne "/\{.+\"Credentials\":\s.+\"AccessKeyId\":\s+\"([^\"]+)\".+\"SecretAccessKey\":\s+\"([^\"]+)\".+\"SessionToken\":\s+\"([^\"]+)\"/s; print qq{export AWS_ACCESS_KEY_ID=\"\$1\";export AWS_SECRET_ACCESS_KEY=\"\$2\";export AWS_SESSION_TOKEN=\"\$3\"\n}"'

aws_gt() {
    [ $# -eq 4 -o $# -eq 2 ] || \
        { echo "usage: aws_gt profile region mfa token_code"; return 1; }

    typeset profile="$1"
    typeset region="$2"
    typeset mfa="$3"
    typeset token_code="$4"

    typeset rc
    typeset json_out
    typeset export_commands

    typeset aws_gt_cmd="$AWS_CMD sts get-session-token --profile $profile"

    if [ -n "$mfa" ]
    then
        json_out="$($aws_gt_cmd --serial-number $mfa --token-code $token_code 2>&1)"
    else
        json_out="$($aws_gt_cmd 2>&1)"
    fi

    typeset rc=$?

    [ $rc -eq 0 ] || { echo "ups: rc=$rc"; echo "$json_out"; return 1; }

    export_commands=$(aws_credentials_export <<< "$json_out")

    if [ -z "$export_commands" ]
    then
        echo "ups: unable to convert json to export def:"
        echo "$json_out"; return
        return 1
    fi

    export_commands+=";export AWS_PROFILE=$profile"
    export_commands+="; export AWS_DEFAULT_REGION=$region"

    eval $export_commands

    echo "--> now connected to AWS account \"$profile\" (region \"$region\")"
}
# EOF aws_gt()


# --- color stuff ---

test -s $HOME/.ls_colors && . $_

export GREP_COLORS='sl=49;39:cx=49;39:mt=49;38;5;178;1:fn=49;39:ln=49;39:bn=49;39:se=49;39';

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export PAGER=less
export LESS='-RC'

alias bat="$BREW_BIN/bat --color=auto --theme=gruvbox"

# git wants a command named 'vimdiff'
alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias glog='git log'
alias grlog='git log --reverse'

# show current git branch (not all branches as with 'git branch')
alias gbr='git rev-parse --abbrev-ref HEAD'

# push local branch to origin
alias gpbr='git push --set-upstream origin $(gbr)'

alias udf='(cd $HOME/.dotfiles; git pull; )'

export GIT_PAGER=/bin/cat


# test -f ~/.config/broot/launcher/bash/br && . $_


# lazy init...
nvm() {
    unset nvm

    if [ -d "$HOME/.nvm" ]
    then
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # nvm itself
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # nvm bash_completion

        nvm $@
    else
        echo "No nvm installation found :-(" >&2
    fi
}


# ----------------------------------------------------------------------------
# tmux stuff
# ----------------------------------------------------------------------------

# we do not want tmux in the vscode terminal, so we need to know
# VSCode might run as local client or via remote extension  (using node server)
export IS_TMUX_SESSION=n

[ -z "$IS_VSC_TERM" ] && IS_VSC_TERM=n

if [ "$IS_VSC_TERM" = n -a "$TERM_PROGRAM" = tmux ]
then
    IS_TMUX_SESSION=y
fi

_start_tmux=y

SKIP_TMUX=n 

if [ "$SKIP_TMUX" != "y" \
     -a "$IS_VSC_TERM" = n -a "$IS_TMUX_SESSION" = n ] && \
command -v tmux >/dev/null && [ -z "$TMUX" ]
then
    if [ -n "$SSH_CONNECTION" ]
    then
        if tmux ls >/dev/null
        then
            # --> let use decide to attach to existing
            #     ssh session or create new one
            while [ $_start_tmux = y ]
            do
                echo ""
                echo "*** Found tmux session(s) ***"

                while true
                do
                    _input=$({ echo "->New_session"; tmux ls | egrep -v '^[0-9]+:'; } | fzf --height 10)

                    if [ -z "$_input" ]
                    then
                        boxes -d info <<< "Start no tmux session"
                        _start_tmux=n
                        break
                    fi

                    if [ "$_input" = "->New_session" ]
                    then
                        unset _input
                        tmux new-session
                        _start_tmux=n
                        break
                    else
                        _input=$(cut -d: -f1 <<< $_input)
                        echo "input: $_input"
                        if tmux ls | cut -d: -f1 | grep -q "^$_input$"
                        then
                            tmux attach -t $_input
                            unset _input
                            _start_tmux=n
                            break
                        else
                            echo "No such session..." >&2
                        fi
                    fi
                done
            done
        else
            # --> ssh session, but no old sessions found
            tmux new-session
            return
        fi
    else
        # --> no ssh session
        tmux new-session
    fi
fi

unset _start_tmux

alias tns='tmux rename-session'
alias tnsd='tmux rename-session $(basename $PWD)'
alias tnw='tmux rename-window'
alias tcs="tmux display-message -p '#S'" # tmux current session
alias tlsa='tmux ls | grep "(attached)" | cut -d: -f1 | mark_list_item $(tcs)'
alias tls='tmux ls | cut -d: -f1 | mark_list_item $(tcs)'
alias tclean='(for s in $(tua); do tmux kill-session -t $s; done)';
alias tswap='tmux swap-pane -U'
alias clean_tmux_sessions='for session in $(tmux ls | egrep "^[0-9]+:" | grep -v " (attached)" |cut -d: -f1); do tmux kill-session -t $session; done'

# (cd to) tmux session home
cdth() {
    local my_session=$(tcs)
    local dir

    for dir in $HOME/{work,edu}/$my_session
    do
        if [ -d $dir ]
        then
            cd $dir || return 1
            echo "" >&2
            echo "-> $PWD" >&2
            echo "" >&2
            return 0
        fi
    done

    echo "I'm homeless..." >&2
    return 1
}

readonly PATH
export PATH

# ----------------------------------------------------------------------------
# source optionally local/private settings
# ----------------------------------------------------------------------------

test -s $HOME/.common_interactive_local_sh && . $HOME/.common_interactive_local_sh

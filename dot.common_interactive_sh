# ----------------------------------------------------------------------------
# functions
# ----------------------------------------------------------------------------

in_path() {
    egrep -q '(^|:)'"$1"'(:|$)' <<< "$PATH"
}


# after pipenv shell switch back to origin dir
peb()  {
    [ "$PIPENV_ACTIVE" = 1 ] || return

    typeset procs=$(pstree -s -g $$)    
    typeset pipenv_pid=$(sed -e 's/.*-pipenv(//' -e 's/).*//' <<< $procs)
    typeset env_file=/proc/$pipenv_pid/environ
    typeset pipenv_dir=$(tr '\0' '\n' < $env_file | 
          awk -F= '$1=="PWD" {print $2; exit;}')

    [ -d "$pipenv_dir" ] && cd "$pipenv_dir"
}

# print multi columns
pmc() {
    [ $# -eq 0 ] && { echo "???" >&2; return 1; }
	local pstr=

	local i
	for ((i = 0; i < $1; i++))
	do
		[ -z "$pstr" ] && pstr='-' || pstr="$pstr -"
	done

	eval paste $pstr
}

# print header
ph() {
	local header="${1:-???}"
	echo
    echo "--- $header ---"
}

stdout_flush_print() {
	local tmpfile=$(mktemp)
	cat - >$tmpfile
	cat $tmpfile
	rm -f $tmpfile
}

# add local pathes etc.
for _bin_dir in ~/bin ~/.local/bin ~/app/{go,jdk}/bin ~/.npm-global ~/app/lkltools
do
    if ! in_path $_bin_dir 2>/dev/null
    then
        PATH=$_bin_dir:$PATH
    fi
done
unset _bin_dir

for _brew_dir in $HOME/.linuxbrew /home/linuxbrew/.linuxbrew
do
    _brew_prog=${_brew_dir}/bin/brew

    if [ -x ${_brew_prog} ]
    then
        eval $(${_brew_prog} shellenv)

		if [ -d "$_brew_dir/opt/openjdk@17" ]
		then
			PATH="$_brew_dir/opt/openjdk@17/bin:$PATH"
		fi

		export HOMEBREW_NO_ENV_HINTS=y

        break
    fi
done
unset _brew_dir _brew_prog

if [ -f $HOME/.cargo/env ]
then
    . $HOME/.cargo/env

    alias cb='cargo build'
    alias cbr='cargo build --release'
    alias cr='cargo run'
fi

alias p6='paste - - - - - -'

if test -d $HOME/.pyenv/bin
then
	export PATH=$HOME/.pyenv/bin:$PATH
    eval "$(pyenv init --path)"

    export PYENV_VIRTUALENV_DISABLE_PROMPT=1

	alias pyenv_versions='ph Available; pyenv install --list| grep "^ *3" | tr -d " " | egrep -v "(^3\.[0-3]\.|dev|a[0-9])" | pmc 8; ph Installed; pyenv versions | fgrep -v "* system" | tr -d "[ ]" | pmc 8; echo;'
fi

export PATH

export TMPDIR=$HOME/tmp
test -d $TMPDIR || mkdir -vp $TMPDIR

ulimit -c 0 -n 4096
umask 002
test -s $HOME/.dircolors && eval $(dircolors $HOME/.dircolors)

alias open=exo-open
alias cdw='cd $HOME/work; ls -ltr'

alias ls='/bin/ls --color=auto'
alias ll='ls -lH'
alias la='ls -a'
alias lla='ls -lHa'

alias grep='grep --color=auto'
alias egrep='grep -E'
alias fgrep='grep -F'

alias ffind='2>/dev/null find'

alias webp2jpg='for w in *.webp; do convert $w ${w%.webp}jpg && /bin/rm $w; done'

alias pyt='pytest -v'
alias pytm='pytest -v --color=no'

export TERM=xterm-256color

export PAGER=less
export LESS='-RC'

if which nvim >/dev/null
then
    export EDITOR=nvim
elif which vim >/dev/null
then
    export EDITOR=vim
else
    export EDITOR=vi
fi

export VISUAL=$EDITOR

set -o vi

alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias s='eval $(ssh-agent)'
alias sa='ssh-add'

alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'

alias fonts="fc-list |awk -v nix= '{\$1=nix; print;}' |cut -d: -f1| sort -u"


# ---------------------------------------------------------------------------
# aws stuff
# ---------------------------------------------------------------------------

export AWS_CMD=aws

# better decide by your own and by call
export AWS_PAGER=""

alias aws_credentials_export='perl -00ne "/\{.+\"Credentials\":\s.+\"AccessKeyId\":\s+\"([^\"]+)\".+\"SecretAccessKey\":\s+\"([^\"]+)\".+\"SessionToken\":\s+\"([^\"]+)\"/s; print qq{export AWS_ACCESS_KEY_ID=\"\$1\";export AWS_SECRET_ACCESS_KEY=\"\$2\";export AWS_SESSION_TOKEN=\"\$3\"\n}"'

aws_gt() {
    [ $# -eq 4 ] || \
        { echo "usage: aws_gt profile region mfa token_code"; return 1; }

    typeset profile="$1"
    typeset region="$2"
    typeset mfa="$3"
    typeset token_code="$4"

    typeset rc
    typeset json_out
    typeset export_commands

    typeset aws_gt_cmd="$AWS_CMD sts get-session-token --profile $profile"

    if [ -n "$mfa" ]
    then
        json_out="$($aws_gt_cmd --serial-number $mfa --token-code $token_code 2>&1)"
    else
        json_out="$($aws_gt_cmd 2>&1)"
    fi

	typeset rc=$?

    [ $rc -eq 0 ] || { echo "ups: rc=$rc"; echo "$json_out"; return 1; }

    export_commands=$(aws_credentials_export <<< "$json_out")

    if [ -z "$export_commands" ]
    then
        echo "ups: unable to convert json to export def:"
        echo "$json_out"; return
        return 1
    fi

    export_commands+=";export AWS_PROFILE=$profile"
    export_commands+="; export AWS_DEFAULT_REGION=$region"

    eval $export_commands

    echo "--> now connected to AWS account \"$profile\" (region \"$region\")"
}
# EOF aws_gt()


# --- color stuff ---

test -s $HOME/.ls_colors && . $_

export GREP_COLORS='sl=49;39:cx=49;39:mt=49;38;5;178;1:fn=49;39:ln=49;39:bn=49;39:se=49;39';

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export PAGER=less
export LESS='-RC'

alias bat='bat --color=auto --theme=gruvbox'

# git wants a command named 'vimdiff'
alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias git='/usr/bin/git -P'
alias gs='git status -s'

alias ssha='eval $(ssh-agent) && ssh-add'
alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'


# ----------------------------------------------------------------------------
# go
# ----------------------------------------------------------------------------

alias gt='go test'
alias gtv='go test -v'
alias gr='go run .'
alias gb='go build .'

# we do not want tmux in the vscode terminal, so we need to know
# VSCode might run as local client or via remote extension  (using node server)
export IS_VSCODE_TERM=n

if pstree -apps $$ | \
    egrep -q -- '-(code,[0-9]+|node,[0-9]+/.*/.vscode-server/bin/.+)'
then
    IS_VSCODE_TERM=y
fi

export IS_TMUX_SESSION=n

if [ $IS_VSCODE_TERM = n ] && pstree $$ -s -t | grep -q -- '-tmux: *server'
then
    IS_TMUX_SESSION=y
fi

export IS_TMUX_SESSION

ps -u $(id -un) | egrep -q '[s]sh-agent$' || eval $(ssh-agent)


# Do Tmux handling if
# - tmux should not be skipped
# - is not VSCode term
# - is not inside a tmux session
# 
# Tmux handling:

SKIP_TMUX=n

alias clean_tmux_sessions='for session in $(tmux ls | egrep "^[0-9]+:" | grep -v " (attached)" |cut -d: -f1); do tmux kill-session -t $session; done'

if [ "$SKIP_TMUX" != "y" \
     -a "$IS_VSCODE_TERM" = n -a "$IS_TMUX_SESSION" = n ] && \
    command -v tmux >/dev/null && [ -z "$TMUX" ]
then

	# delete all non attached, non named tmux sessions, must be set here

    if [ -s $HOME/.tmux.main_name ]
    then
        _tmux_main_name=$(< $HOME/.tmux.main_name)
    else
        _tmux_main_name=main
    fi

    clean_tmux_sessions

    if tmux ls |grep -q "^${_tmux_main_name}:" 
    then
        if [ -n "$SSH_CONNECTION" ]
        then

            if tmux ls |grep -q "^${_tmux_main_name}:.* (attached)\$"
            then
                tmux detach-client -s $_tmux_main_name
            fi

            tmux attach -t $_tmux_main_name
        elif tmux ls |grep -q "^${_tmux_main_name}:.* (attached)\$"
        then
            tmux new-session
            # exec tmux new-session
        else
            tmux attach -t $_tmux_main_name
        fi
    else
        tmux new-session -s $_tmux_main_name
    fi

    unset _tmux_main_name

	alias ts='tmux set status'
fi

if test -d $(brew --prefix)/opt/fzf
then
	. $(brew --prefix)/opt/fzf/shell/key-bindings.bash
	export FZF_DEFAULT_OPTS='--border sharp --height=60% '
fi


# ----------------------------------------------------------------------------
# source optionally local/private settings
# ----------------------------------------------------------------------------

test -s $HOME/.common_interactive_local_sh && . $HOME/.common_interactive_local_sh

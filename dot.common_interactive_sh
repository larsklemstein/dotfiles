# ----------------------------------------------------------------------------
# basic stuff
# ----------------------------------------------------------------------------

PATH=$HOME/bin:$PATH

test -d "$HOME/app/go/bin" && PATH="$_:$PATH"    # go itself
test -d "$HOME/go/bin" && PATH="$_:$PATH"        # go toolchain

test -d "$HOME/app/bin" && PATH="$_:$PATH" 
test -d "$HOME/app/node/bin" && PATH="$_:$PATH"   # nodejs
test -d "$HOME/.local/bin" && PATH="$_:$PATH"  # local Python stuff etc.
test -f "$HOME/.cargo/env" && . $HOME/.cargo/env  # rust (env will extend PATH)
test -d "$HOME/app/node/bin" && PATH="$_:$PATH"   # node-js

export PATH

export TMPDIR=$HOME/tmp
test -d $TMPDIR || mkdir -vp $TMPDIR

ulimit -c 0
umask 002
test -s $HOME/.dircolors && eval $(dircolors $HOME/.dircolors)

alias ls='/bin/ls --color=auto'
alias ll='ls -lH'
alias la='ls -a'
alias lla='ls -lHa'

alias grep='grep --color=auto'
alias egrep='grep -E'
alias fgrep='grep -F'

alias sgc='git clone --depth=1 '

alias ffind='2>/dev/null find'

# udf == update dotfiles (git repo)
alias udf='( df=$HOME/.dotfiles; test -d $df && { cd $df && git pull; } || echo "(git repo) dir $df not found!"; )'

export TERM=xterm-256color

export PAGER=less
export LESS='-RC'

export EDITOR=vim
export VISUAL=$EDITOR

set -o vi

alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'

alias fonts="fc-list |awk -v nix= '{\$1=nix; print;}' |cut -d: -f1| sort -u"


# ----------------------------------------------------------------------------
# fzf/ripgrep/fd stuff
# ----------------------------------------------------------------------------

if test -f $HOME/.fzf.bash
then
    . $HOME/.fzf.bash

    FZF_DEFAULT_OPTS='--height 80% --layout=default --border'
    export FZF_DEFAULT_OPTS

    export FZF_DEFAULT_COMMAND='fdfind . -t f'

    alias fzf='fzf --preview "bat {} -f --theme gruvbox"'
    alias mr='$EDITOR "$@" $(fzf)'
fi


clm() {
    typeset n=$1
    typeset d=$2

    if [[ -z $n || $n == *[^0-9]* ]]
    then
        echo "???"
        return
    fi

    if [ -z "$d" ]
    then
        awk '{print $'"$n"'}'
    else
        awk -F"$d" '{print $'"$n"'}'
    fi
}


# ----------------------------------------------------------------------------
# go stuff
# ----------------------------------------------------------------------------

get_go_rootdir() {
    typeset org_pwd="$PWD"

    while [ "$PWD" != / -a ! -f "$PWD/main.go" ]
    do
        cd ..
    done

    if [ -f "$PWD/main.go" ]
    then
        echo "$PWD"
    else
        echo ""
    fi

    cd $org_pwd
}

alias groot=get_go_rootdir
alias cdgroot='cd $(get_go_rootdir); ls -ltr'

exec_in_go_root() {
    typeset cmds="$@"
    typeset go_root=$(get_go_rootdir)

    if [ -n "$go_root" ]
    then
        cd $go_root
        go $cmds
        cd - >/dev/null
        return 0
    else
        echo "Not possible!" >&2
        return 1
    fi
}

alias gbuild='exec_in_go_root build'
alias grun='exec_in_go_root run main.go'


# ---------------------------------------------------------------------------
# aws stuff
# ---------------------------------------------------------------------------

export AWS_CLI_PROGRAM=aws

# better decide by your own and by call
export AWS_PAGER=""

alias aws_credentials_export='perl -00ne "/\{.+\"Credentials\":\s.+\"AccessKeyId\":\s+\"([^\"]+)\".+\"SecretAccessKey\":\s+\"([^\"]+)\".+\"SessionToken\":\s+\"([^\"]+)\"/s; print qq{export AWS_ACCESS_KEY_ID=\"\$1\";export AWS_SECRET_ACCESS_KEY=\"\$2\";export AWS_SESSION_TOKEN=\"\$3\"\n}"'

# hint: in .common_interactive_local_sh create an alias like:
# alias st_mca='aws_gt default arn:aws:iam::4711:mfa/user'
#
aws_gt() {
    [ $# -eq 3 ] || { echo "usage: aws_gt profile mfa token_code"; return 1; }

    typeset profile="$1"
    typeset mfa="$2"
    typeset token_code="$3"

    typeset rc
    typeset json_out
    typeset export_commands

    json_out="$($AWS_CLI_PROGRAM sts get-session-token --profile "$profile" \
        --serial-number $mfa --token-code $token_code 2>&1)"
	rc=$?

    [ $rc -eq 0 ] || { echo "ups: rc=$rc"; echo "$json_out"; return 1; }

    export_commands=$(aws_credentials_export <<< "$json_out")

    if [ -z "$export_commands" ]
    then
        echo "ups: unable to convert json to export def:"
        echo "$json_out"; return
        return 1
    fi

    export_commands+=";export AWS_PROFILE=$profile"

    eval $export_commands

    echo "--> now connected to AWS account \"$profile\""
}
# EOF aws_gt()


# --- color stuff ---

test -s $HOME/.ls_colors && . $_

export GREP_COLORS='sl=49;39:cx=49;39:mt=49;38;5;178;1:fn=49;39:ln=49;39:bn=49;39:se=49;39';

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export PAGER=less
export LESS='-RC'


alias bat='bat --color=auto --theme=gruvbox'

# preview only if file size is <= 10MB
mybat() {
    [ $(stat -t "$1" |cut -d ' ' -f2) -le 10485760 ] && bat --color=always --theme=gruvbox-dark --style=header,numbers "$1"
}

if test -f /etc/os-release && grep -q '^NAME="Debian ' /etc/os-release
then
	export THIS_OS=LINUX
    alias fd=fdfind
    export FZF_DEFAULT_COMMAND='fdfind . -t f'
else
	export THIS_OS=mac
    export FZF_DEFAULT_COMMAND='fd . -t f'
fi

# useful aliases

alias fnvim='nvim $(fzf)'

# git wants a command named 'vimdiff'
alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias gs='git status -s'

alias kill_ssh_agents='for p in $(ps -u $LOGNAME |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'


cfgpull() {
    typeset cfg_dir

    for cfg_dir in ~/.dotfiles ~/.config/nvim
    do
        echo "-> $cfg_dir"
        cd $cfg_dir
        git pull
        cd -
    done
}


# ---------------------------------------------------------------------------
# messaging stuff
# ---------------------------------------------------------------------------

error() {
    echo "$*" >&2
}


# ----------------------------------------------------------------------------
# tmux
# ----------------------------------------------------------------------------

sst(){
	# the "tmux ls" trick seems to be required on at least some systems
	# to avoid the "is not a terminal" issue.
	#
	ssh -t $@ 'tmux ls && tmux attach || tmux'
}

alias ta='tmux attach'
alias td='tmux detach'
alias tl='tmux ls'


# ----------------------------------------------------------------------------
# docker
# ----------------------------------------------------------------------------

docon() {
    docker exec -it "$1" /bin/bash
}

# ----------------------------------------------------------------------------
# optionally source local/private settings
# ----------------------------------------------------------------------------

# echo .common_interactive_sh calls .commpon_interactive_local_sh
test -s $HOME/.common_interactive_local_sh && . $HOME/.common_interactive_local_sh

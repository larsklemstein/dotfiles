# ----------------------------------------------------------------------------
# generic stuff
# ----------------------------------------------------------------------------

msg() {
    echo "$*" >&2
}

in_path() {
    egrep -q '(^|:)'"$1"'(:|$)' <<< "$PATH"
}


# try to *not* pollute everything too much...
is_worker_path() {
    test $PWD = $HOME && return 1
    test $PWD = $HOME/work && return 1
    test $PWD = $HOME/edu && return 1

    return 0
}

export_unique_PATH() {
    local new_path=

    for item in $(tr ':' '\n' <<< $PATH)
    do
        if [[ $new_path =~ (^|:)$item(:|$) ]]
        then
            continue
        fi

        if [ -z "$new_path" ]
        then
            new_path=$item
        else
            new_path=$new_path:$item
        fi
    done

    export PATH="$new_path"
}

# print multi columns
pmc() {
    [ $# -eq 0 ] && { echo "???" >&2; return 1; }
    local pstr=

    local i
    for ((i = 0; i < $1; i++))
    do
        [ -z "$pstr" ] && pstr='-' || pstr="$pstr -"
    done

    eval paste $pstr
}

# add local pathes etc.

mark_list_item() {
    awk '/'$1'/ { $0 = $0 " <---"; } { print($0); }'
}

show_path() {
    tr -s : '\n' <<< $PATH
}

edit_path() {
    local tmpf=$(mktemp)

    show_path >$tmpf

    ${EDITOR:-vi} $tmpf

    export PATH=$(tr '\n' : < $tmpf | egrep -v '^ *(#|$)')
    /bin/rm -f $tmpf
}

locate_prog() {
    local _prog="$1"
    local _path=$(which $_prog)
    local which_rc=$?

    if [[ "$_path" =~ "not found" ]]
    then
        echo "Not found" >&2
        return 1
    elif [[ "$_path" =~ "^$_prog: aliased to" ]]
    then
        echo "Is an alias" >&2
        return 1
    fi

    local _basepath=${_path%/*}
    local p

    show_path | while read p
    do
        if grep -q "^$_basepath" <<< "$p"
        then
            echo "==> $p"
        else
            echo "    $p"
        fi
    done
}

THIS_OS=linux
[ $(uname -s) = 'Darwin' ] && THIS_OS=mac
export THIS_OS

export TERM=xterm-256color

# print file or dir age in sec
#
secage() {
    thing="$1"
    [ $# -eq 1 ] || { echo "??" 2>&1; return 1; }
    [ -f "$thing" -o -d "$thing" ] || { echo "$thing does not exist" 2>&1; return 1; }

    echo $(($(date +%s)-$(stat -t "$thing" | cut -d' ' -f13)))
}

# cd (to) path of
cdpo() {
    [ $# -ne 1 ] && { echo '???' >&2; return 1; }
    local prog="$1"
    local fullpath=$(which $prog 2>/dev/null)

    if type $prog | grep -q 'is an alias'
    then
        echo "Is an alias" >&2
        return 1
    fi

    if [ -n "$fullpath" ]
    then
        cd ${fullpath%/*}
        return 0
    else
        echo "Not found" >&1
        return 1
    fi
}

fancy_print=$(which lolcat)
[ -n "$fancy_print" ] || fancy_print=/bin/cat

alias C=clear

CC() {
    clear
    for _ in $(seq $LINES); do echo; done
}

NN() {
    local nf=$HOME/.nuke.big
    if [ ! -f $nf ]
    then
        CC
        return
    fi

    local nl=$(wc -l $nf | awk '{print($1)}')

    local nw=62
    local nwa=$(((COLUMNS-62)/2))

    local sa=$((LINES-nl))
    local sl=$((sa/2))


    local indent=""
    for ((i = 0; i < $nwa; i++)); do
        indent+=" "
    done

    for ((i=0; i < $sl; i++)); do echo; done
    sed "s/^/$indent/" $nf | $fancy_print
    for ((i=0; i < $sl; i++)); do echo; done
}

# ----------------------------------------------------------------------------
# The holy $PATH
# ----------------------------------------------------------------------------

for _bin_dir in ~/bin ~/.local/bin ~/.rd/bin \
    ~/app/bin ~/app/jenkins-cli ~/app/{go,VSCode-linux-x64}/bin \
    ~/.npm-global ~/app/lkltools ~/.rd/bin /opt/homebrew/opt/coreutils/bin
do
    if test -d $_bin_dir && ! in_path $_bin_dir 2>/dev/null
    then
        PATH=$_bin_dir:$PATH
    fi
done
unset _bin_dir

for _brew_dir in /opt/homebrew $HOME/.linuxbrew /home/linuxbrew/.linuxbrew
do
    _brew_prog=${_brew_dir}/bin/brew

    if [ -x ${_brew_prog} ]
    then
        eval $(${_brew_prog} shellenv)

        export HOMEBREW_NO_ENV_HINTS=y
        export BREW_BIN="$_brew_dir/bin"

        break
    fi
done
unset _brew_dir _brew_prog



# ----------------------------------------------------------------------------
# rust stuff
# ----------------------------------------------------------------------------

# activate rust if available
if [ -f $HOME/.cargo/env ]
then
    . $HOME/.cargo/env

    export RUST_BACKTRACE=1
fi


# ----------------------------------------------------------------------------
# python stuff
# ----------------------------------------------------------------------------

per() {
    if [ ! -f ./Pipfile ]
    then
        echo "No Pipfile found here, abort!" >&2
        return 1
    fi

    pipenv run ./$*
}

pyc() {
    local pyfile="$1"

    echo "" >&2

    echo "Check types:" >&2
    pyright "$pyfile"
    echo "[rc=$?]"

    echo "" >&2

    echo "Check style:" >&2
    flake8 "$pyfile"
    echo "[rc=$?]"

    echo "" >&2
}


# ---------------------------------------------------------------------------
# The nore or less usual stuff
# ---------------------------------------------------------------------------

export TMPDIR=$HOME/tmp
test -d $TMPDIR || mkdir -vp $TMPDIR

ulimit -c 0 -n 4096
umask 002

test -f $HOME/.dircolors && eval $(dircolors $HOME/.dircolors)

test $THIS_OS = linux && alias open=exo-open

alias cdw='cd $HOME/work; ls -ltr'

alias ls="$(which lsd)"
alias ll='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias llt='ls -l --tree'
alias llg='ls -l --git'
alias lltg='ls --git --tree'
alias llgt='ls --git --tree'

pll() {
    local dir="${1:-$PWD}"

    [ "$dir" = $PWD ] && dir=$PWD

    if [ -d .git ]
    then
        echo
        lsd -l --git --tree -I __pycache__ -I node_modules "$dir"
    else
        echo "Dir $dir does not seem to be a git folder" >&2
    fi

    (
        cd $dir
        git branch | sed 's/^ *\* */Git branch: /' | boxes -d ansi-rounded
    )

    echo
}


alias grep='grep --color=auto'
alias egrep='grep -E'
alias fgrep='grep -F'

alias dua="$BREW_BIN/dua -t4 interactive"

alias nrg='rg --color=never'

alias webp2jpg='for w in *.webp; do convert $w ${w%.webp}jpg && /bin/rm $w; done'


export PAGER=less
export LESS='-RC'

export EDITOR=nvim
export VISUAL=$EDITOR

set -o vi

alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias pstree='pstree -g3'


# ---------------------------------------------------------------------------
# ssh-agent stuff
# ---------------------------------------------------------------------------

alias s='eval $(ssh-agent)'

# we want a ssh-agent always:
ps x | grep -q  '[s]sh-agent$' || s

alias sa='ssh-add'

alias kill_ssh_agents='for p in $(ps x |awk -v p=ssh-agent "\$NF == p {print \$1;}"); do kill $p ; done'

alias fonts="fc-list |awk -v nix= '{\$1=nix; print;}' |cut -d: -f1| sort -u"


# ---------------------------------------------------------------------------
# fzf stuff
# ---------------------------------------------------------------------------

# . $(brew --prefix)/opt/fzf/shell/key-bindings.bash
#

# take fzf from $PATH now...
if [ -n "$ZSH_NAME" ]
then
    eval "$(fzf --zsh)"
else
    eval "$(fzf --bash)"
fi

export FZF_DEFAULT_OPTS='--extended --layout=default --color=dark --style=full:rounded --height=20% --tmux 90%'

export FZF_DEFAULT_COMMAND='fd --no-hidden -E __pycache__ -E node_modules'

export FZF_CTRL_T_COMMAND='fd --strip-cwd-prefix'

export FZF_CTRL_T_OPTS="--bind='ctrl-p:execute:bat --style=numbers {}' --bind='ctrl-e:execute:nvim {}' --preview='test -f {} && bat --color=always --theme=gruvbox-dark --style=plain --line-range=:50 {} --paging=never || lsd --tree -I __pycache__ -I node_modules --depth=8 --color=always {}'"
alias ffzf='fzf --preview="test -e {} && bat --style=numbers --color=always {}"'

fze() {
    local choosen=$(ffzf)

    [ -n "$choosen" ] && $EDITOR $choosen
}


# ---------------------------------------------------------------------------
# generic project related stuff
# ---------------------------------------------------------------------------


# return the searched item (given by sub path) backwards;
# e.g. you could searvh for the project .gitignore file from any subdir
# in the project
fep() {
    [ $# -eq 2 -o $# -eq 3 ] || \
        { echo "Usage: fep start item [max_steps]" >&2; return 2; }

    local start="$1"
    local item="$2"
    local max_steps=${3:-30}

    local dir="$start"

    [ "$dir" = . ] && dir="$PWD"

    while [ "$dir" != "/" -a $((max_steps)) -gt 0 ]
    do
        local item_path="${dir}/${item}"

        if [ -e "$item_path" ]
        then
            echo "$item_path"
            return 0
        fi

        dir="${dir%/*}"
        max_steps=$((max_steps-1))
    done

    return 1
}

fepb() {
    [ $# -eq 2 -o $# -eq 3 ] || \
        { echo "Usage: fepb start item [max_steps]" >&2; return 2; }

    local start="$1"
    local item="$2"
    local max_steps=${3:-30}

    local item_path=$(fep "$start" "$item" $max_steps) 
    [ -z "$item_path" ] && return 1

    echo ${item_path%/$item}
    return 0
}


# ---------------------------------------------------------------------------
# mise related stuff
# ---------------------------------------------------------------------------


# mise tool set
mst() {
    if ! is_worker_path
    then
        echo "Do not run here!"
        return 1
    fi

    local choice=$(mise list | awk '{print($1 " " $2)}' | fzf)
    choice=${choice/ /@}
    choice=${choice/\/}

    mise use $choice
}


mstat() {
    local mise_cfg=.config/mise/config.toml
    local project_base=$(fepb $PWD $mise_cfg)

    [ -n "$project_base" ] || \
        { echo "No $mise_cfg found" >&2; return 1; }

    MISE_PROJECT_ROOT=$project_base . $project_base/${mise_cfg%/*}/enter_project.rc
}


# mise tool list
# Problem: works only in project root. TODO: find Mise project root automatically
# before executing this
msl() {
    awk '/\[tools\]/ {in_tools = 1; next;}/\[.*\]/ {in_tools=0; next;} { if (in_tools && /=/) {gsub(/"/, ""); printf("%s %s\n", $1, $3)}}' .config/mise/config.toml
}


# ---------------------------------------------------------------------------
# aws stuff
# ---------------------------------------------------------------------------

export AWS_CMD=aws

# better decide by your own and by call
export AWS_PAGER=""

alias aws_credentials_export='perl -00ne "/\{.+\"Credentials\":\s.+\"AccessKeyId\":\s+\"([^\"]+)\".+\"SecretAccessKey\":\s+\"([^\"]+)\".+\"SessionToken\":\s+\"([^\"]+)\"/s; print qq{export AWS_ACCESS_KEY_ID=\"\$1\";export AWS_SECRET_ACCESS_KEY=\"\$2\";export AWS_SESSION_TOKEN=\"\$3\"\n}"'

aws_gt() {
    [ $# -eq 4 -o $# -eq 2 ] || \
        { echo "usage: aws_gt profile region mfa token_code"; return 1; }

    typeset profile="$1"
    typeset region="$2"
    typeset mfa="$3"
    typeset token_code="$4"

    typeset rc
    typeset json_out
    typeset export_commands

    typeset aws_gt_cmd="$AWS_CMD sts get-session-token --profile $profile"

    if [ -n "$mfa" ]
    then
        json_out="$($aws_gt_cmd --serial-number $mfa --token-code $token_code 2>&1)"
    else
        json_out="$($aws_gt_cmd 2>&1)"
    fi

    typeset rc=$?

    [ $rc -eq 0 ] || { echo "ups: rc=$rc"; echo "$json_out"; return 1; }

    export_commands=$(aws_credentials_export <<< "$json_out")

    if [ -z "$export_commands" ]
    then
        echo "ups: unable to convert json to export def:"
        echo "$json_out"; return
        return 1
    fi

    export_commands+=";export AWS_PROFILE=$profile"
    export_commands+="; export AWS_DEFAULT_REGION=$region"

    eval $export_commands

    echo "--> now connected to AWS account \"$profile\" (region \"$region\")"
}
# EOF aws_gt()


# --- color stuff ---

test -s $HOME/.ls_colors && . $_

export GREP_COLORS='sl=49;39:cx=49;39:mt=49;38;5;178;1:fn=49;39:ln=49;39:bn=49;39:se=49;39';

export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export PAGER=less
export LESS='-RC'

alias bat="$BREW_BIN/bat --color=auto --theme=gruvbox"

# git wants a command named 'vimdiff'
alias vimdiff='nvim -d'
alias nvimdiff=vimdiff

alias glog='git log'
alias grlog='git log --reverse'

# show current git branch (not all branches as with 'git branch')
alias gbr='git rev-parse --abbrev-ref HEAD'

# push local branch to origin
alias gpbr='git push --set-upstream origin $(gbr)'

alias glbr='git branch -r | cut -d/ -f2- | grep -v HEAD'

alias glbrce='glbr | grep -i --color=never "^ce-" | boxes -d peek'

alias udf='(cd $HOME/.dotfiles; git pull; )'

mkbranch() {
    [ $# -eq 1 -o $# -eq 2 ] \
        || { msg "usage: mkbranch branch [origin]"; return 1; }

    local branch="$1"
    local remote="${2:-origin}"

    git checkout -b "$branch" || return 1
    git push $remote $branch
}

export GIT_PAGER=/bin/cat

alias tns='tmux rename-session'
alias tnsd='tmux rename-session $(basename $PWD)'
alias tnw='tmux rename-window'
alias tnwp='tmux rename-window ${PWD##*/}'
alias tp=tnwp
alias tcs="tmux display-message -p '#S'" # tmux current session
alias tlsa='tmux ls | grep "(attached)" | cut -d: -f1 | mark_list_item $(tcs)'
alias tls='tmux ls | cut -d: -f1 | mark_list_item $(tcs)'
alias tclean='(for s in $(tua); do tmux kill-session -t $s; done)';
alias tswap='tmux swap-pane -U'
alias clean_tmux_sessions='for session in $(tmux ls | egrep "^[0-9]+:" | grep -v " (attached)" |cut -d: -f1); do tmux kill-session -t $session; done'

# this should really, really be (almost) at end...
export_unique_PATH


# ----------------------------------------------------------------------------
# source optionally local/private settings (which hopefully does not mess up
# $PATH too much...
# ----------------------------------------------------------------------------

test -s $HOME/.common_interactive_local_sh && . $HOME/.common_interactive_local_sh
